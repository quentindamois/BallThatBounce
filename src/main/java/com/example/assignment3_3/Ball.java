package com.example.assignment3_3;

import javafx.application.Application;
import javafx.scene.Group;
import javafx.scene.Scene;
import javafx.scene.control.Label;
import javafx.scene.input.MouseEvent;
import javafx.scene.layout.FlowPane;
import javafx.scene.layout.GridPane;
import javafx.scene.layout.HBox;
import javafx.scene.shape.Circle;
import javafx.stage.Stage;

import java.io.IOException;
import java.util.ArrayList;
import java.util.concurrent.Executor;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;


/**
 * The ball class is the class used to show a window. This is a subclass of the Application class.
 * */
public class Ball extends Application {
    /**
     * The ballTahtBounce filed is an AbleToBounceObject storing the ball generated by the user
     * */
    private AbleToBounce ballThatBounce;
    /**
     * ballgroup is a GridPane field used to put the ball on it.
     * */
    private GridPane ballgroup;
    /**
     * WINDOW_WIDTH is a int final field storing the width of the window.
     * */
    private final int WINDOW_WIDTH = 500;
    /**
     * WINDOW_HEIGHT is a int final field storing the height of the window.
     * */
    private final int WINDOW_HEIGHT = 500;
    /**
     * This field is used for handling threading.
     * */
    private ExecutorService executor;
    /**
     * This function is used for starting the program.
     * */
    @Override
    public void start(Stage stage) throws IOException {
        Label title = new Label("click anywhere to throw the ball.");
       this.ballgroup = new GridPane();
       this.ballgroup.setVgap(1.0);
       this.ballgroup.setHgap(1.0);
       this.ballgroup.addEventHandler(MouseEvent.MOUSE_CLICKED, event -> {
           if (ballThatBounce == null) {
               bouncing(event.getSceneX(), event.getSceneY());
           }
       });
       this.executor = Executors.newFixedThreadPool(2);
       this.executor.submit(() -> {
           actualise();
       });
        Scene scene = new Scene(ballgroup, WINDOW_WIDTH, WINDOW_HEIGHT);
        stage.setTitle("Bouncing Ball");
        stage.setScene(scene);
        ballgroup.getChildren().add(title);
        stage.show();
    }
    /**
     * This method call the AbleToBounce method BorderColideHandler.
     * */
    public void borderTouch() {
        this.ballThatBounce.BorderColideHandler(this.WINDOW_WIDTH, this.WINDOW_HEIGHT);
    }
    /**
     * The bouncing method generate the ball in the window.
     * It randomly genrate the direction of the ball.
     * It generates a AbleToBounce object and assign it to the field ballThatBounce and add to the field ballgroup.
     * */
    public void bouncing(double x, double y) {
        int xSpeed = Math.random() > 0.5 ? 1 : -1;
        int ySpeed = Math.random() > 0.5 ? 1 : -1;
        this.ballThatBounce = new AbleToBounce(x - 12.5, y - 12.5,25.0, xSpeed, ySpeed);
        this.ballgroup.getChildren().add(ballThatBounce);
    }
    /**
     * The method actualise is used for moving the ball on the window and checking if the direction need to be change due to touching a border
     * */
    public void actualise() {
        while(true) {
            System.out.println();
            if (ballThatBounce != null) {
                    try {
                        Thread.sleep(20);
                        ballThatBounce.setCenterX(ballThatBounce.getCenterX() + ballThatBounce.getXSpeed());
                        ballThatBounce.setCenterY(ballThatBounce.getCenterY() + ballThatBounce.getYSpeed());
                        ballThatBounce.setTranslateX(ballThatBounce.getCenterX() + ballThatBounce.getXSpeed());
                        ballThatBounce.setTranslateY(ballThatBounce.getCenterY() + ballThatBounce.getYSpeed());
                        borderTouch();
                    } catch (InterruptedException e) {
                        System.out.println("ERRORRR");
                    }
            }
        }
        }
        /**
         * The main method is used beginning the window.
         * */
    public static void main(String[] arg) {
        launch(arg);
    }
}
